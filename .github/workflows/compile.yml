name: Build & Test

on: [push, pull_request]
  
jobs:
  build:

    runs-on: self-hosted
  
    defaults:
      run:
        working-directory: ./src
    
    outputs:
      semver: ${{ steps.gitversion.outputs.semver }}
      LicenseClearingTool: ${{ steps.packageBuildResults.outputs.LicenseClearingTool }}
        
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: nuget/setup-nuget@v1
      with:
        nuget-version: '5.x'
    
     
    #- name: Determine Version
     # uses: gittools/actions/gitversion/execute@v0.9.7

    #- name: Display SemVer
     # run: |
     #   echo "SemVer: $GITVERSION_SEMVER" 
     
    - name: Gitversion
      id: gitversion
      run: |
        dotnet tool install --global GitVersion.Tool --version 5.3.6
        dotnet gitversion /output buildserver /nofetch
        echo %GITVERSION_SEMVER%
        echo "SemVer: $GitVersion_SemVer" 
        Write-Host "version is: $($env:GitVersion_SemVer)"
        Write-Host "::set-output name=semver::$($env:GitVersion_SemVer)"
        Write-Host "dotnet-gitversion SemVer"
        dotnet gitversion /output file /outputfile version.json
      env: 
        ACTIONS_ALLOW_UNSECURE_COMMANDS: TRUE
     
     
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    
    - name: Restore Packages
      run: dotnet restore LicenseClearingTool.sln 
      
    - name: Build
      run: msbuild -m -t:Rebuild -p:Configuration=Release -bl:continous-clearing.binlog -noconlog LicenseClearingTool.sln
    
    - name: Archive Build Log
      uses: actions/upload-artifact@v2
      if: ${{ success() || failure() }}
      with:
        name: Compile_Solution_log
        path: |
          src/*.binlog
          
    - name: Create zip
      id: packageBuildResults
      run: |
        $sourceFolder = Join-Path $env:GITHUB_WORKSPACE "out" | Join-Path -ChildPath "*"
        $outFolder = Join-Path $env:GITHUB_WORKSPACE "out" | Join-Path -ChildPath "LicenseClearingTool" 
        New-Item -ItemType Directory -Force -Path $outFolder
        $fileName = "LicenseClearingTool-$($env:GitVersion_SemVer).zip"
        Write-Host "Filename: '$fileName'"
        Write-Host "sourceFolder: '$sourceFolder'"
        Write-Host "Outfolder: '$outFolder'"
        dir
        $outPath = Join-Path $outFolder $fileName
        Compress-Archive -DestinationPath $outPath -Path $sourceFolder -CompressionLevel Optimal
      
    - name: Archive Build Result
      uses: actions/upload-artifact@v2
      with:
        name: LicenseClearingTool
        path: |
           out/LicenseClearingTool
           
  #  - name: Test
   #   run: |
    #    $TestProjects = Get-ChildItem -Path *.UTest.csproj -Recurse
    #    foreach ($Project in $TestProjects) 
     #   {                 
      #          Write-Host $Project.DirectoryName
       #         $TestProject = $Project.DirectoryName
        #        Push-Location $Project.PSParentPath
         #       dotnet test --no-build --configuration Release
     #   }
    - name: Create Nuget Packages    
      run: |
        nuget
        nuget pack CA.nuspec  
         
             
    #- name: Create Nuget Package
     # run: |
     #   $packageOutFolder = Join-Path $env:GITHUB_WORKSPACE "out" | Join-Path -ChildPath "NuGet"
     #   dotnet pack LicenseClearingTool.sln --no-build --configuration Release --output $packageOutFolder
         
        #Write-Host "Save filenames of created NuGet packages..."
     #   $packages = gci -Path $packageOutFolder -File "*.nupkg" 
        #Write-Host "Binary NuGet Package: '$packages'"  
                
    - name: Archive NuGet Packages
      uses: actions/upload-artifact@v2
      with:
        name: nuget-LicenseClearingTool
        path: |
          src/LicenseClearingTool.1.0.0.nupkg


  release:
    if: github.ref == 'refs/heads/main'
#    if: github.ref == 'refs/heads/Pipeline_test'
    runs-on: windows-latest
    needs: build
    defaults:
      run: 
        shell: pwsh
    steps:
      - name: Download Build Result
        uses: actions/download-artifact@v2
        with:
          name: LicenseClearingTool

      - name: Download NuGet Package
        uses: actions/download-artifact@v2
        with:
          name: nuget-LicenseClearingTool
      
      - name: Debug
        run: |
          tree
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          #tag_name: ${{ needs.build.outputs.semver }}
          tag_name: v1.0.1
          release_name: Release v1.0.1
          body: |
            ${{ github.event.head_commit.message }}
          draft: true
          prerelease: true   
          
      - name: Upload Zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./${{ needs.build.outputs.LicenseClearingTool }}
          asset_name: ${{ needs.build.outputs.LicenseClearingTool }}
          asset_content_type: application/zip
